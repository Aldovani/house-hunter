// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum STATUS {
  PENDING
  ACCEPTED
  CANCELED
}

enum Role {
  ADMIN
  MEMBER
}

enum TYPETOKEN {
  TOKEN_FORGOT_PASSWORD
  EMAIL_FORGOT_PASSWORD
}

model User {
  id          String        @id @default(uuid())
  email       String        @unique
  password    String
  name        String
  created_at  DateTime      @default(now())
  avatar      String?
  role        Role          @default(MEMBER)
  House       House[]
  Appointment Appointment[]
  usersToken  UserTokens[]

  @@map("users")
}

model House {
  id          String  @id @default(uuid())
  title       String
  rent_price  Decimal @db.Decimal(9, 2)
  buy_price   Decimal @db.Decimal(9, 2)
  description String  @db.VarChar(300)

  longitude      Decimal
  latitude       Decimal
  address        String  @db.VarChar(60)
  city           String
  state          String
  district       String
  address_number Int
  available      Boolean @default(false)

  created_at DateTime @default(now())

  owner    User   @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  owner_id String

  house_room  HouseRoom[]
  appointment Appointment[]

  HouseImage HouseImage[]
  contact    Contact?

  @@map("houses")
}

model HouseImage {
  id   String @id @default(uuid())
  name String

  house_id String
  house    House  @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("house_images")
}

model Contact {
  id        String  @id @default(uuid())
  cellphone String
  facebook  String?
  email     String?
  phone     String?

  House    House  @relation(fields: [house_id], references: [id])
  house_id String @unique

  @@map("contacts")
}

model Room {
  id   String @id @default(uuid())
  name String @unique

  house_rooms HouseRoom[]

  @@map("rooms")
}

model HouseRoom {
  quantity Int

  house    House  @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  house_id String
  room     Room   @relation(fields: [room_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  room_id  String

  @@id([house_id, room_id])
  @@map("house_rooms")
}

model Appointment {
  id         String   @id @default(uuid())
  created_at DateTime @default(now())
  status     STATUS   @default(PENDING)

  appointment_date DateTime
  house            House    @relation(fields: [house_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  house_id         String
  user             User     @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user_id          String

  @@map("appointments")
}

model UserTokens {
  id           String    @id @default(uuid())
  token        String
  validated_at DateTime?
  created_at   DateTime  @default(now())
  type_token   TYPETOKEN

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  @@map("user_tokens")
}
